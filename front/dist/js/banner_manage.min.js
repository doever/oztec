function BannerManage(){this.addBannerBtn=$("#add-banner"),this.deleteBannerBtn=$(".banner-close-btn"),this.editBannerBtn=$(".edit-banner-btn")}BannerManage.prototype.listenAddNewBanner=function(){this.addBannerBtn.click(function(){layer.open({type:2,title:"新增轮播图",skin:"layui-layer-rim",area:["600px","400px"],btn:["确定","取消"],content:"../../templates/add_banner.html",yes:function(e,n){var t=layer.getChildFrame("body",e).find("form");csrfajax.post({url:"/adminlte/banner_list/",data:t.serialize(),success:function(n){200===n.code?(layer.close(e),layer.msg("ok",{icon:1,time:1e3}),window.location.reload()):layer.msg("error",{icon:2,time:1e3})}})},btn2:function(n,e){layer.close(n)}})})},BannerManage.prototype.listerDeleteBanner=function(){this.deleteBannerBtn.click(function(){var t=$(this).parent().parent().attr("data-pk");layer.confirm("确定删除?",{btn:["确定","取消"],btn2:function(n,e){layer.close()}},function(n,e){csrfajax.delete({url:"/adminlte/banner/"+t+"/",data:{},success:function(n){200===n.code?(layer.close(),layer.msg("删除成功",{icon:1,time:1e3}),window.location.reload()):layer.msg(n.message,{icon:2,time:1e3})},fail:function(n){layer.msg("服务器内部错误",{icon:2,time:1e3})}})})})},BannerManage.prototype.listenEditBanner=function(){this.editBannerBtn.click(function(){var n=$(this),e=n.parent().parent().attr("data-pk"),t=n.parent().siblings().eq(1).children().eq(1),a=t.find("input[name=position]"),i=t.find("input[name=link_url]"),r=a.val(),o=i.val();console.log("position:"+r,"linkUrl:"+o),csrfajax.put({url:"/adminlte/banner/"+e+"/",data:{position:r,link_url:o},success:function(n){200===n.code?(layer.msg("保存成功",{icon:1,time:1e3}),window.location.reload()):layer.msg(n.message,{icon:2,time:1e3})},fail:function(n){layer.msg("服务器内部错误",{icon:2,time:1e3})}})})},BannerManage.prototype.run=function(){var n=this;n.listenAddNewBanner(),n.listerDeleteBanner(),n.listenEditBanner()},$(function(){(new BannerManage).run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
